#!/usr/bin/env python

import pathlib

from modeller import *
from modeller.automodel import *
from modeller.parallel import *
from modeller.scripts import complete_pdb
from fixatoms import MyModel_auto

j = job(host='localhost')
j.append(local_slave())
j.append(local_slave())
j.append(local_slave())
j.append(local_slave())
j.append(local_slave())
j.append(local_slave())
j.append(local_slave())
j.append(local_slave())
j.append(local_slave())
j.append(local_slave())

log.verbose()
env = environ()

env.libs.topology.read(file='$(LIB)/top_heav.lib')
env.libs.parameters.read(file='$(LIB)/par.lib')
env.io.atom_files_directory = ['./']

# Read in HETATM records from template PDBs
env.io.hetatm = True

a = MyModel_auto(
    env,
    alnfile='ali.pir',
    knowns=('template'),
    sequence=pathlib.Path('.').resolve().name,  # dirname
    assess_methods=(assess.DOPE,),
)

a.starting_model = 1
a.ending_model = 10

# Optimization
# CG
a.library_schedule = autosched.fastest
a.max_var_iterations = 300
a.max_molpdf = 1e6

# MD
a.md_level = refine.very_fast

a.use_parallel_job(j)
a.make()

# Rescore full models with DOPE
# Read a model previously generated by Modeller's automodel class
#log.none()  # shuuush
#curdir = pathlib.Path('.')
#for model in curdir.rglob('*.B99*.pdb'):
#    mdl = complete_pdb(env, str(model))
#    atmsel = selection(mdl)  # all atoms
#    score = atmsel.assess_dope()
#    print(f'DOPE Score: {model} {score}')

# Leave DONE tag
with open('DONE', 'w'):
    pass
